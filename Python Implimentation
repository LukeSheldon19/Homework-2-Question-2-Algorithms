import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.image as mpimg

class TreeNode:
    def __init__(self, position, quadrant):
        self.position = position  # x, y coordinates of this node's quadrant
        self.quadrant = quadrant  # one of: 'horizontal', 'vertical', 'top-left', 'top-right', 'bottom-left', 'bottom-right'
        self.left = None
        self.right = None

def load_image(filepath):
    """Load the image using matplotlib."""
    return mpimg.imread(filepath)

def draw_triangle(ax, x, y, width, height):
    """Draw a triangle in the middle of the given rectangle."""
    triangle_height = 0.1 * height  # Adjust the triangle size as needed
    triangle_width = 0.1 * width   # Adjust the triangle size as needed
    triangle_x = x + width / 2
    triangle_y = y + height / 2

    triangle = plt.Polygon([
        [triangle_x - triangle_width / 2, triangle_y + triangle_height / 2],
        [triangle_x, triangle_y - triangle_height / 2],
        [triangle_x + triangle_width / 2, triangle_y + triangle_height / 2]
    ], closed=True, fill=True, edgecolor='none', facecolor='black')  # You can adjust the triangle color

    ax.add_patch(triangle)

def bsp_split(node, image_shape, ax, depth=0, max_depth=3):
    """Recursive function to split the image using BSP and visualize the partitions."""
    if depth == max_depth:
        return

    x, y = node.position

    if node.quadrant in ['horizontal', 'vertical']:
        if node.quadrant == 'horizontal':
            left_child_quadrant = 'bottom-left'
            right_child_quadrant = 'bottom-right'
        else:
            left_child_quadrant = 'top-left'
            right_child_quadrant = 'top-right'

        node.left = TreeNode((x, y), left_child_quadrant)
        node.right = TreeNode((x, y), right_child_quadrant)

        # Visualize the partition with rectangles
        rect = patches.Rectangle((0, 0), image_shape[1], image_shape[0], linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)
        ax.set_xlim(0, image_shape[1])
        ax.set_ylim(0, image_shape[0])
        ax.set_aspect('equal', adjustable='box')
        plt.pause(1)  # Pause for visualization

        print(f"Splitting {node.quadrant} into {left_child_quadrant} and {right_child_quadrant}")
        bsp_split(node.left, image_shape, ax, depth + 1, max_depth)
        bsp_split(node.right, image_shape, ax, depth + 1, max_depth)

    else:
        half_width = image_shape[1] // (2 ** (depth + 1))
        half_height = image_shape[0] // (2 ** (depth + 1))

        if node.quadrant == 'top-left':
            vertical_position = (x - half_width, y)
            horizontal_position = (x, y + half_height)
        elif node.quadrant == 'top-right':
            vertical_position = (x + half_width, y)
            horizontal_position = (x, y + half_height)
        elif node.quadrant == 'bottom-left':
            vertical_position = (x - half_width, y)
            horizontal_position = (x, y - half_height)
        elif node.quadrant == 'bottom-right':
            vertical_position = (x + half_width, y)
            horizontal_position = (x, y - half_height)

        node.left = TreeNode(horizontal_position, 'horizontal')
        node.right = TreeNode(vertical_position, 'vertical')

        # Visualize the partition with rectangles
        rect = patches.Rectangle((x - half_width, y - half_height), half_width * 2, half_height * 2,
                                 linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)

        # Draw a triangle in the middle of the rectangle
        draw_triangle(ax, x - half_width, y - half_height, half_width * 2, half_height * 2)

        plt.pause(1)  # Pause for visualization

        print(f"Splitting {node.quadrant} into {node.left.quadrant} and {node.right.quadrant}")
        bsp_split(node.left, image_shape, ax, depth + 1, max_depth)
        bsp_split(node.right, image_shape, ax, depth + 1, max_depth)

def in_order_traversal(node):
    if not node:
        return []

    left_traversal = in_order_traversal(node.left)
    right_traversal = in_order_traversal(node.right)
    return left_traversal + [node.quadrant] + right_traversal

def main():
    # Use raw string literal for the filepath to avoid escape characters
    filepath = r"C:/Users/LukeB/Downloads/Screenshot_2023-10-01_at_6.26.08_PM.png"  # Replace with your actual file path
    location = tuple(map(int, input("Enter the location as x,y: ").split(',')))

    image = load_image(filepath)

    fig, ax = plt.subplots(figsize=(6, 6))

    root = TreeNode(location, 'horizontal')
    print(f"Starting with the {root.quadrant} quadrant")

    bsp_split(root, image.shape, ax)

    print("\nIn-Order Traversal of BSP Tree:")
    traversal_result = in_order_traversal(root)
    for i, quadrant in enumerate(traversal_result):
        print(f"Step {i + 1}: Quadrant: {quadrant}")

    ax.imshow(image)
    ax.set_title("Original Image")

    plt.show()

if __name__ == '__main__':
    main()
()
